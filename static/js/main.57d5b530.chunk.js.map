{"version":3,"sources":["components/CountrySelector.jsx","components/HighlightChart/HighlightCard.jsx","components/HighlightChart/Highlight.jsx","components/Charts/LineChart.jsx","components/Summary.jsx","App.js","apis/index.js","index.js"],"names":["CountrySelector","value","handleOnChange","countries","FormControl","InputLabel","htmlFor","shrink","required","NativeSelect","onChange","inputProps","name","id","map","country","ISO2","toLowerCase","Country","FormHelperText","useStyles","makeStyles","wrapper","props","type","border","title","fontSize","marginBottom","count","fontWeight","customTitle","text","color","HighlightCard","styles","titleStyle","colortheme","createTheme","palette","primary","main","contrastText","secondary","error","Card","className","CardContent","ThemeProvider","theme","Typography","component","variant","Highlight","report","data","length","summary","Confirmed","Deaths","Active","Grid","container","spacing","item","sm","xs","LineChart","useState","options","setOptions","reportType","setReportType","useEffect","customData","slice","chart","height","subtitle","xAxis","categories","moment","Date","format","crosshair","colors","yAxis","min","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","generateOptions","ButtonGroup","size","style","display","flexDirection","justifyContent","textTransform","Button","onClick","highcharts","Highcharts","Summary","selectedCountryId","App","setcountries","selectedCountryID","setSelectedCountryID","setReport","axios","get","then","res","console","log","sortBy","Slug","find","pop","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57d5b530.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormHelperText,\r\n  InputLabel,\r\n  NativeSelect,\r\n} from \"@material-ui/core\";\r\n\r\nfunction CountrySelector({ value, handleOnChange, countries }) {\r\n  return (\r\n    <FormControl>\r\n      <InputLabel htmlFor=\"country-selector\" shrink required>\r\n        Country\r\n      </InputLabel>\r\n      <NativeSelect\r\n        value={value}\r\n        onChange={handleOnChange}\r\n        inputProps={{\r\n          name: \"country\",\r\n          id: \"country-selector\",\r\n        }}\r\n      >\r\n        {countries.map((country) => {\r\n          return (\r\n            <option value={country.ISO2.toLowerCase()}>\r\n              {country.Country}\r\n            </option>\r\n          );\r\n        })}\r\n      </NativeSelect>\r\n      <FormHelperText>Choose your country</FormHelperText>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CountrySelector;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography, makeStyles } from \"@material-ui/core\";\r\nimport { ThemeProvider, createTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: (props) => {\r\n    if (props.type === \"confirmed\") return { border: \"3px solid #f5ab2c\" };\r\n    if (props.type === \"recovered\") return { border: \"3px solid #1eeb0c\" };\r\n    if (props.type === \"active\") return { border: \"3px solid #20e8d7\" };\r\n    else return { border: \"3px solid #f70505\" }; //props.type === \"Death\"\r\n  },\r\n  title: {\r\n    fontSize: 15,\r\n    marginBottom: 10,\r\n  },\r\n  count: {\r\n    fontSize: 12,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nconst customTitle = makeStyles({\r\n  title: (text) => {\r\n    if (text.title === \"Total cases\") return { color: \"#f2c224\" };\r\n    if (text.title === \"Total recovered\") return { color: \"#4caf50\" };\r\n    if (text.title === \"Active cases\") return {color: \"#20e8d7\"};\r\n    else return { color: \"#d32f2f\" };\r\n  },\r\n});\r\n\r\nconst HighlightCard = ({ title, count, type }) => {\r\n  const styles = useStyles({ type });\r\n  const titleStyle = customTitle({ title });\r\n\r\n  const colortheme = createTheme({\r\n    palette: {\r\n      primary: { main: \"#f2c224\", contrastText: \"secondary\" },\r\n      secondary: { main: \"#4caf50\", contrastText: \"secondary\" },\r\n      error: { main: \"#d32f2f\", contrastText: \"\" },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Card className={styles.wrapper}>\r\n      <CardContent>\r\n        <ThemeProvider theme={colortheme}>\r\n          <Typography\r\n            className={titleStyle.title}\r\n            component=\"p\"\r\n            variant=\"body2\"\r\n          >\r\n            {title}\r\n          </Typography>\r\n\r\n          <Typography component=\"span\" variant=\"body2\">\r\n            {count}\r\n          </Typography>\r\n        </ThemeProvider>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default HighlightCard;","import { Grid } from \"@material-ui/core\";\r\n\r\nimport React from \"react\";\r\nimport HighlightCard from \"./HighlightCard\";\r\n\r\nexport default function Highlight({ report }) {\r\n  const data = report && report.length ? report[report.length - 1] : [];\r\n\r\n  const summary = [\r\n    {\r\n      title: \"Total cases\",\r\n      count: data.Confirmed,\r\n      type: \"confirmed\",\r\n    },\r\n    {\r\n      title: \"Total recovered\",\r\n      count: data.Confirmed - data.Deaths - data.Active,\r\n      type: \"recovered\",\r\n    },\r\n    {\r\n      title: \"Active cases\",\r\n      count: data.Active,\r\n      type: \"active\"\r\n    },\r\n    {\r\n      title: \"Total deaths\",\r\n      count: data.Deaths,\r\n      type: \"death\",\r\n    },\r\n  ];\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {summary.map((item) => (\r\n        <Grid item sm={3} xs={12}>\r\n          <HighlightCard\r\n            title={item.title}\r\n            count={item.count}\r\n            type={item.type}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n","import HighchartsReact from \"highcharts-react-official\";\r\nimport Highcharts from \"highcharts\";\r\nimport { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport React from \"react\";\r\nimport { Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\nconst generateOptions = (data) => {\r\n  const categories = data.map((item) => moment(item.Date).format(\"MM/DD/YYYY\"));\r\n  return {\r\n    chart: {\r\n      height: 500,\r\n    },\r\n    title: {\r\n      text: \"Overview of global Covid-19 cases\",\r\n    },\r\n    subtitle: {\r\n      text: \"API source: https://api.covid19api.com/countries\",\r\n    },\r\n    xAxis: {\r\n      categories: categories,\r\n      crosshair: true,\r\n    },\r\n    colors: [\"#fcba03\"],\r\n    yAxis: {\r\n      min: 0,\r\n      title: {\r\n        text: null,\r\n      },\r\n    },\r\n    tooltip: {\r\n      headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n      pointFormat:\r\n        '<tr><td style=\"color:{series.color}; padding: 2\">{series.name}: </td>' +\r\n        '<td style=\"padding: 0\"><b>{point.y} cases </b></td></tr>',\r\n      footerFormat: \"</table>\",\r\n      shared: true,\r\n      useHTML: true,\r\n    },\r\n    plotOptions: {\r\n      column: {\r\n        pointPadding: 0.2,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Total infected cases\",\r\n        data: data.map((item) => item.Confirmed),\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nexport default function LineChart({ data }) {\r\n  const [options, setOptions] = useState({});\r\n  const [reportType, setReportType] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    let customData = [];\r\n    switch (reportType) {\r\n      case \"all\":\r\n        customData = data;\r\n        break;\r\n      case \"month\":\r\n        customData = data.slice(data.length - 31);\r\n        break;\r\n      case \"week\":\r\n        customData = data.slice(data.length - 7);\r\n        break;\r\n      default:\r\n        customData = data;\r\n        break;\r\n    }\r\n    setOptions(generateOptions(customData));\r\n  }, [reportType, data]);\r\n\r\n  return (\r\n    <div>\r\n      <ButtonGroup\r\n        size=\"small\"\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n          textTransform: \"capitalize\",\r\n        }}\r\n      >\r\n        <Button\r\n          color={reportType === \"all\" ? \"primary\" : \"\"}\r\n          onClick={() => setReportType(\"all\")}\r\n        >\r\n          All dates\r\n        </Button>\r\n        <Button\r\n          color={reportType === \"month\" ? \"primary\" : \"\"}\r\n          onClick={() => setReportType(\"month\")}\r\n        >\r\n          1 month\r\n        </Button>\r\n        <Button\r\n          color={reportType === \"week\" ? \"primary\" : \"\"}\r\n          onClick={() => setReportType(\"week\")}\r\n        >\r\n          1 week\r\n        </Button>\r\n      </ButtonGroup>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import { Grid } from \"@material-ui/core\";\r\nimport LineChart from \"./Charts/LineChart\";\r\nimport React from \"react\";\r\n// import { useEffect, useState } from \"react\";\r\n// import HighMaps from \"./Charts/HighMaps\";\r\n\r\nfunction Summary({ report, selectedCountryId }) {\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={4}>\r\n        <Grid item sm={12}>\r\n          <LineChart data={report} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, {useEffect, useState} from 'react'\nimport { getCountry, getReportByCountry } from './apis/index'\nimport CountrySelector from './components/CountrySelector'\nimport Highlight from './components/HighlightChart/Highlight.jsx'\nimport Summary from './components/Summary'\nimport {sortBy} from 'lodash';\n\nfunction App() {\n  const [countries, setcountries] = useState([]);\n  const [selectedCountryID, setSelectedCountryID] = useState('');\n  const [report, setReport] = useState([]);\n\n  useEffect(() => {\n    getCountry().then((res) =>{\n      console.log({res});\n\n      const countries = sortBy(res.data, 'Country')\n      setcountries(countries);\n\n      setSelectedCountryID('vn');\n    })\n  }, []);\n\n  const handleOnChange = (e) => {\n    setSelectedCountryID(e.target.value);\n  }\n\n\n  //useEffect always executes after the first render, so we need to check if users have selected country ID yet.\n  useEffect(() => { \n    if (selectedCountryID) {\n      const { Slug } = countries.find((country) => country.ISO2.toLowerCase() === selectedCountryID);\n      //call API\n      getReportByCountry(Slug).then((res) => {\n      //Remove last item\n      res.data.pop();\n      setReport(res.data);\n    });\n    }\n  }, [countries, selectedCountryID])\n\n  return <>\n    <CountrySelector countries={countries} handleOnChange={handleOnChange} value={selectedCountryID}/>\n    <Highlight report={report}/>\n    <Summary report={report}/>\n  </>\n}\n\nexport default App\n","import axios from 'axios';\r\n\r\nexport const getCountry = () => axios.get('https://api.covid19api.com/countries');\r\n\r\nexport const getReportByCountry = (country) => axios.get(`https://api.covid19api.com/dayone/country/${country}`);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}